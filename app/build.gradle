apply plugin: 'com.android.application'
def bakPath = file("${buildDir}/bakApk/")
android {
    signingConfigs {
        config {
            keyAlias 'weaponzhi'
            keyPassword '123456'
            storeFile file('/Users/weaponzhi/AndroidStudioProjects/SmallPlugin/release.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.weaponzhi.imoocsmall"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        /**
         * not like proguard, multiDexKeepProguard is not a list, so we can't just
         * add for you in our task. you can copy tinker keep rules at
         * build/intermediates/tinker_intermediates/tinker_multidexkeep.pro
         */
        multiDexKeepProguard file("keep_in_main_dex.pro")

        buildConfigField "String", "PLATFORM", "\"all\""
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    //帮助我们生成 application 时使用，只参与编译，不参与打包
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    //tinker 的核心 sdk 库
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}")
    compile 'com.android.support:multidex:1.0.1'
    testCompile 'junit:junit:4.12'
}


ext{
    tinkerEnable = true
    tinkerOldApkPath = "${bakPath}/app-release-0813-17-48-53.apk"
    tinkerID = "1.0"
    tinkerApplyMappingPath = "${bakPath}/app-release-0813-17-48-53-mapping.txt"
    tinkerApplyResourcePath = "${bakPath}/app-release-0813-17-48-53-R.txt"
}

def buildWithTinker() {
    return ext.tinkerEnable
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return ext.tinkerID
}
//Tinker和Small集成，只能更新宿主，如果需要修复插件，需要依赖一个lib,然后在每个插件中集成Tinker
if (buildWithTinker()) {
    //启用Tinker
    apply plugin: 'com.tencent.tinker.patch'
    //所有tinker相关的参数配置
    tinkerPatch {
        oldApk = getOldApkPath()//指定old apk 文件路径

        ignoreWarning = true  //是否要忽略Tinker的警告，如果有警告则终止patch文件的生成

        useSign = true      //强制patch文件也使用签名

        tinkerEnable = buildWithTinker(); //指定是否启用tinker

        buildConfig {

            applyMapping = getApplyMappingPath() //指定old apk打包时所使用的混淆规则文件

            applyResourceMapping = getApplyResourceMappingPath() //指定old apk 的资源文件

            tinkerId = getTinkerIdValue() //指定TinkerId

            keepDexApply = false

            isProtectedApp = true
        }

        dex {
            dexMode = "jar" //jar、raw
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"] //指定dex文件目录
            loader = ["com.weaponzhi.imoocsmall.MyTinkerApplication"]
        }

        lib {
            pattern = ["libs/*/*.so"]
        }

        res {

            pattern = ["res/*", "assets/*", "resources.arcs", "AndroidManifest.xml"]
            //指定tinker可以修改的资源路径

            ignoreChange = ["assets/sample_meta.txt"] //指定不受影响的资源路径

            largeModSize = 100 //资源修改大小默认值
        }
        //说明本次补丁的信息
        packageConfig {

            configField("patchMessage", "fix the 1.0 version's bugs")

            configField("patchVersion", "1.0");
        }
    }


    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each {flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}
